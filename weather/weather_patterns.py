import asyncio
import json
import os
import httpx
from dotenv import load_dotenv


async def ow_request_url_1d_city(city):
    load_dotenv()
    city_name = city.lower()
    url = (
        f"https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={os.getenv('OPENWEATHER_TOKEN')}&units"
        f"=metric&lang=ru")
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url=url, timeout=httpx.Timeout(timeout=10.0, read=30.0))
            return response
        except httpx.ConnectTimeout:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–∏ÃÜ–º-–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenWeather"
        except httpx.ReadTimeout:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–∏ÃÜ–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenWeather"


async def ow_request_url_5d_city(city):
    load_dotenv()
    city_name = city.lower()
    url = (
        f"https://api.openweathermap.org/data/2.5/forecast?q={city_name}&appid={os.getenv('OPENWEATHER_TOKEN')}&units"
        f"=metric&lang=ru")
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url=url, timeout=httpx.Timeout(timeout=10.0, read=30.0))
            return response
        except httpx.ConnectTimeout:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–∏ÃÜ–º-–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenWeather"
        except httpx.ReadTimeout:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–∏ÃÜ–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenWeather"


async def ow_request_url_1d_index(index):
    load_dotenv()
    url = (
        f"https://api.openweathermap.org/data/2.5/weather?zip={index},"
        f"ru&appid={os.getenv('OPENWEATHER_TOKEN')}&units"
        f"=metric&lang=ru")
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url=url, timeout=httpx.Timeout(timeout=10.0, read=30.0))
            return response
        except httpx.ConnectTimeout:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–∏ÃÜ–º-–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenWeather"
        except httpx.ReadTimeout:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–∏ÃÜ–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenWeather"


async def ow_request_url_5d_index(index):
    load_dotenv()
    url = (f"https://api.openweathermap.org/data/2.5/forecast?zip={index},"
           f"ru&appid={os.getenv('OPENWEATHER_TOKEN')}&units"
           f"=metric&lang=ru")
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url=url, timeout=httpx.Timeout(timeout=10.0, read=30.0))
            return response
        except httpx.ConnectTimeout:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–∏ÃÜ–º-–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenWeather"
        except httpx.ReadTimeout:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–∏ÃÜ–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenWeather"



async def gm_search_cities(city):
    load_dotenv()
    url = 'https://api.gismeteo.net/v2/search/cities/'
    get_token = os.getenv('GISMETEO_TOKEN')
    headers = {'X-Gismeteo-Token': get_token}
    params = {'query': city}
    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers, params=params)
        return response


async def gm_request_url_1d(city_id):
    load_dotenv()
    url = f'https://api.gismeteo.net/v2/weather/current/{city_id}/'
    get_token = os.getenv('GISMETEO_TOKEN')
    headers = {'X-Gismeteo-Token': get_token}
    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        return response


async def gm_request_url_forecast(city_id):
    load_dotenv()
    url = f'https://api.gismeteo.net/v2/weather/forecast/{city_id}/?lang=ru&days=10'
    get_token = os.getenv('GISMETEO_TOKEN')
    headers = {'X-Gismeteo-Token': get_token}
    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)
        return response


code_to_smile = {
    "Clear": "–Ø—Å–Ω–æ \U00002600",
    "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
    "Rain": "–î–æ–∂–¥—å \U00002614",
    "Drizzle": "–î–æ–∂–¥—å \U00002614",
    "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
    "Snow": "–°–Ω–µ–≥ \U0001F328",
    "Mist": "–¢—É–º–∞–Ω \U0001F32B"
}

gm_precipitation_type_pattern = {
    '0': '–ù–µ—Ç –æ—Å–∞–¥–∫–æ–≤ \U00002600',
    '1': '–î–æ–∂–¥—å \U00002614',
    '2': '–°–Ω–µ–≥ \U0001F328',
    '3': 'üåß –°–º–µ—à–∞–Ω–Ω—ã–µ –æ—Å–∞–¥–∫–∏ üå§Ô∏è',
}

gm_description_geomagnetic_pattern = {
    0: '–í—Å–µ —Å–ø–æ–∫–æ–π–Ω–æ.',
    1: '–ù–µ—Ç –∑–∞–º–µ—Ç–Ω—ã—Ö –≤–æ–∑–º—É—â–µ–Ω–∏–π',
    2: '–ù–µ–±–æ–ª—å—à–∏–µ –≤–æ–∑–º—É—â–µ–Ω–∏—è',
    3: '–°–ª–∞–±–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è',
    4: '–ú–∞–ª–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è',
    5: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è',
    6: '–°–∏–ª—å–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è',
    7: '–ñ–µ—Å—Ç–∫–∏–π –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–π —à—Ç–æ—Ä–º',
    8: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —à—Ç–æ—Ä–º',
}

ERROR_CITY_NAME = f'–û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ '

"""
    for debug and test
"""


async def main():
    print(await ow_request_url_5d_index('628160'))


if __name__ == '__main__':
    asyncio.run(main())
