import asyncio
from weather.weather_patterns import (gm_request_url_forecast,
                                      ERROR_CITY_NAME,
                                      gm_search_cities, gm_request_url_1d, gm_precipitation_type_pattern,
                                      gm_description_geomagnetic_pattern
                                      )


async def get_cities_id_gm(city_name):
    try:
        response = await gm_search_cities(city_name)
        status_code = response.status_code
        if status_code == 200:
            data = response.json()
            if 'error' in data.get('response', {}):
                error_message = data['response']['error']['message']
                error_code = data['response']['error']['code']
                if error_message:
                    return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Gismeteo: {error_message} {error_code}"
                else:
                    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ä–≤–µ—Ä–∞ Gismeteo"
            else:
                cities_name = data['response']['items']
                cities_data = {}
                for i in range(len(cities_name)):
                    cities_data[data['response']['items'][i]['id']] = (
                        f"–û–±–ª–∞—Å—Ç—å: {data['response']['items'][i]['district']['name']}\n "
                        f"–≥–æ—Ä–æ–¥: {data['response']['items'][i]['name']}")
                result = [f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º ID –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–≥–æ–¥—ã \nID( /{key} )\n: {value}\n\n' for key, value in cities_data.items()]
                return f"{''.join(result)}"
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
    return f"{response.status_code}"


async def get_weather_gm_city_id(city_id):
    response = await gm_request_url_1d(city_id)
    status_code = response.status_code
    if status_code == 200:
        try:
            data = response.json()
            date = f'–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {data["response"]["date"]["local"]}\n'
            emoji_temp = f'üå°–°–≤–µ–¥–µ–Ω–∏—è –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µüå°: \n'
            temp_air = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {data['response']['temperature']['air']['C']}¬∞C\n"
            temp_comfort = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—é: {data['response']['temperature']['comfort']['C']}¬∞C\n"
            temp_water = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: {data['response']['temperature']['water']['C']}¬∞C\n"
            description = f"{data['response']['description']['full']}\n"
            gm = data['response']['gm']
            if gm in gm_description_geomagnetic_pattern:
                gm_desc = f"–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {gm} {gm_description_geomagnetic_pattern[gm]}\n"
            else:
                gm_desc = f"–ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {gm} (–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—å)...\n"
            pressure = f"–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {data['response']['pressure']['mm_hg_atm']} –º–º.—Ä—Ç.—Å—Ç\n"
            humidity = f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['response']['humidity']['percent']}%\n"
            storm = f"{data['response']['storm']}\n"
            storm_format = "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥—Ä–æ–∑—ã: –î–∞\n" if storm == True else "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥—Ä–æ–∑—ã: –ù–µ—Ç\n"
            precipitation_type = f"{data['response']['precipitation']['type']}\n"
            service_name = '<i>–ü–æ –¥–∞–Ω–Ω—ã–º GisMeteo</i>\n'
            if precipitation_type in gm_precipitation_type_pattern:
                pt = gm_precipitation_type_pattern[precipitation_type]
            else:
                pt = "–û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞...\n"
            return f'{date}{emoji_temp}{temp_air}{temp_comfort}{temp_water}{description}{gm_desc}{pressure}{humidity}{storm_format}{pt}{service_name}'
        except Exception as e:
            return f"{str(e)} -- {e}"
    else:
        return f"{response.status_code}"


async def get_weather_gm_city_id_n_d(city_id):
    response = await gm_request_url_forecast(city_id)
    status_code = response.status_code
    if status_code == 200:
        try:
            result = []
            data = response.json()
            service_name = '<i>–ü–æ –¥–∞–Ω–Ω—ã–º GisMeteo</i>\n'
            for i in range(6):
                date = f'–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {data["response"][i]["date"]["local"]}\n'
                result.append(date)
                emoji_temp = f'–°–≤–µ–¥–µ–Ω–∏—è –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ: \n'
                result.append(emoji_temp)
                temp_air = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {data['response'][i]['temperature']['air']['C']}¬∞C\n"
                result.append(temp_air)
                temp_comfort = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ –æ—â—É—â–µ–Ω–∏—é: {data['response'][i]['temperature']['comfort']['C']}¬∞C\n"
                result.append(temp_comfort)
                temp_water = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: {data['response'][i]['temperature']['water']['C']}¬∞C\n\n"
                result.append(temp_water)
                if i == 5:
                    result.append(service_name)
            return ''.join(result)
        except Exception as e:
            return f"{str(e)} -- {e}"
    else:
        return f"{response.status_code}"


async def main():
    print(await get_weather_gm_city_id('4368'))

if __name__ == '__main__':
    asyncio.run(main())
